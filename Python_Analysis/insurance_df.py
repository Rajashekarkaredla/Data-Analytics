# -*- coding: utf-8 -*-
"""insurance_df.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W2BT7iwVKePV7vCWBsY144mxdARbNGVs
"""

#imprt file to google colab
from google.colab import files
uploaded=files.upload()
import pandas as pd
in_df=pd.read_csv('insurance.csv')
in_df

#Data Loading and Exploration
in_df.columns
in_df.shape
in_df.describe()
in_df.info()

#DATA CLEANING
# Check for missing values
in_df.isnull().sum()
# Fill missing values(if any)
in_df.fillna(in_df['bmi'].mean())
#Drop rows with any missing values
in_df.dropna()
#drop duplicates
in_df.drop_duplicates()

#total children in each region
in_df.groupby('region')['children'].sum().reset_index()

#count number of children in each region
#in_df.groupby('region')
in_df['children'].value_counts().reset_index()

#no children without using lambda
in_df[in_df['children'] == 0]['sex'].value_counts().reset_index()

#females adn males in each region
in_df.groupby('region')['sex'].value_counts().reset_index()

#Data Filtering and Selection
#selecting age greaterthan 30 and childern more than 2 and females with highest charges
in_df[(in_df['age']>30) & (in_df['children']>2) & (in_df['sex']=='female')].sort_values(by='charges',ascending=False).head(10)

#each region highest charges
in_df.groupby('region')['charges'].max().reset_index()

#average of each region
in_df.groupby('region')['charges'].mean().reset_index()

#average charges
in_df.groupby('sex')['charges'].mean().reset_index()

#total charges in each region
in_df.groupby('region')['charges'].sum().reset_index()

#region with highest average charges
in_df.groupby('region')['charges'].mean().sort_values(ascending=False).head(1).reset_index()

#average age with no children
in_df[in_df['children']==0]['age'].mean()

#age and sex of least charges
in_df.sort_values(by='charges',ascending=True)[['sex','age']].head(3)

#average bmi and age of males and females
in_df.groupby('sex')[['bmi','age']].mean().reset_index()

#no children
#in_df.groupby('sex')[in_df['children']==0].value_counts().reset_index()
in_df.groupby('sex')['children'].apply(lambda x : (x==0).sum()).reset_index()

#percentage of no children
in_df.groupby('sex')['children'].apply(lambda x: (x==0).sum()/len(in_df)*100).reset_index()

#percentage of smokers
(in_df.groupby('sex')['smoker'].value_counts()/len(in_df)*100).round(2).reset_index()
#with lambda
in_df.groupby('sex')['smoker'].apply(lambda x: x.value_counts()/len(x)*100).reset_index()

#replacing female with womens and male with mens
in_df['sex'].replace({'female':'womens' , 'male':'mens'})

#pivot table
import pandas as pd
pd.pivot_table(in_df,index='sex',columns='region',values='charges',aggfunc='mean')

pd.pivot_table(in_df,index='sex',columns='smoker',values='children',aggfunc='max')

#total number of region
in_df.groupby('region')['region'].count()

#outliers
def out(out):
  q1=out.quantile(0.25)
  q3=out.quantile(0.75)
  lower=[i for i in out if i< q1-1.5 *(q3-q1)]
  upper=[i for i in out if i> q3+1.5*(q3-q1)]
  return lower,upper
out(in_df['bmi'])

#visualizations
import matplotlib.pyplot as plt
import seaborn as sns
sns.countplot(x='region', data=in_df)
plt.title("Count by Region")

sns.histplot(in_df['age'], bins=20)
plt.title("Age Distribution")

import matplotlib.pyplot as plt
plt.boxplot(in_df['bmi'])
#plt.boxplot(in_df['age'])

import seaborn as sns
sns.scatterplot(data=in_df,x='age',y='charges',hue='smoker')

import plotly.express as ex
ex.scatter_3d(in_df,x='age',y='bmi',z='children',color='age',size='age')
#in_df.columns

ex.scatter(in_df,x='charges',y='age',color='region')