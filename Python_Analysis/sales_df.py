# -*- coding: utf-8 -*-
"""Sales_df.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mIE3s5frm_8Ugqn5VKq1C48T64JpIg1R
"""

#importing of the data frame and pandas into google colab
from google.colab import files
uploaded=files.upload()
import pandas as pd
sd_df = pd.read_csv('sales_data_sample.csv', encoding='latin-1')
sd_df

# displaying of first five rows.
sd_df.head(5)

#retriving the unique ORDERNUMBER and sum
sd_df['ORDERNUMBER'].nunique()
sd_df['ORDERNUMBER'].unique()
sd_df.drop_duplicates(subset='ORDERNUMBER')

#orders which status was shipped and productline was motocycles with ordernumber, yearid
sd_df[(sd_df['STATUS']=='Shipped') & (sd_df['PRODUCTLINE']=='Motorcycles')][['ORDERNUMBER','YEAR_ID']]

#orders with sales greater than 4000 with ordernumber, sales,orderdate
sd_df[sd_df['SALES']>4000][['ORDERNUMBER','SALES','ORDERDATE']]

#orders in 2003 with quantityordered above 30
sd_df[(sd_df['YEAR_ID']>2003) & (sd_df['QUANTITYORDERED']>30)]

#sum of sales with productline and year_id
sd_df.groupby(['PRODUCTLINE','YEAR_ID'])['SALES'].sum().reset_index()

#average of priceeach for productline
sd_df.groupby(['PRODUCTLINE'])['PRICEEACH'].mean().reset_index()

#highest sale in 2003 with month_id
sd_df[sd_df['YEAR_ID']==2003].groupby('MONTH_ID')['SALES'].sum().reset_index().sort_values(by='SALES',ascending=False).head(1)

#sorting the data frame with orderdate
sd_df['ORDERDATE']=pd.to_datetime(sd_df['ORDERDATE'])
sd_df.sort_values(by='ORDERDATE',ascending=True).head(5)

#top three sales with ordernumber adn productline
sd_df[['ORDERNUMBER','SALES','PRODUCTLINE']].sort_values(by='SALES',ascending=False).head(3)

#creating new column total price with the values of multiplying quantityordered and priceeach
sd_df['TOTAL_PRICE']=sd_df['QUANTITYORDERED']*sd_df['PRICEEACH']
sd_df['TOTAL_PRICE']

#extracting month from orderdate
sd_df['ORDERDATE']=pd.to_datetime(sd_df['ORDERDATE'])
sd_df['MONTH']=sd_df['ORDERDATE'].dt.month_name()
sd_df['MONTH']

#replacing of classic cars with vintage cars in productline
sd_df['PRODUCTLINE']=sd_df['PRODUCTLINE'].replace('Classic Cars','Vintage Cars')
sd_df['PRODUCTLINE'].unique()

#total sales in each year
sd_df.groupby(['YEAR_ID'])['SALES'].sum().reset_index()

#creating of pivot table with sales,productline,qtr_id
sd_df.pivot_table(values='SALES',index='PRODUCTLINE',columns='QTR_ID',aggfunc='sum',fill_value=0)

#average of MSRP for productline
sd_df.groupby(['PRODUCTLINE'])['MSRP'].mean().reset_index()

#total quantityordered for each productline
sd_df.groupby('PRODUCTLINE')['QUANTITYORDERED'].sum().reset_index()

#ordersplaced in each each qtr_id in 2003
sd_df[sd_df['YEAR_ID']==2003]['QTR_ID'].value_counts().reset_index()

#ORDERNUMBER which had the highest SALES in 2005
sd_df[sd_df['YEAR_ID']==2003].groupby('ORDERNUMBER')['SALES'].sum().reset_index().sort_values(by='SALES',ascending=False).head(1)

#outliers
def out(out):
  q1=out.quantile(0.25)
  q3=out.quantile(0.75)
  lower=[i for i in out if i<q1 - 1.5 * (q3-q1)]
  upper=[i for i in out if i>q3+1.5 * (q3-q1)]
  return lower, upper
out(sd_df['SALES'])

#correlation
import numpy as np
sd_df[['QUANTITYORDERED', 'SALES', 'PRICEEACH']].corr()

#import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
corr = sd_df[['QUANTITYORDERED', 'SALES', 'PRICEEACH']].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")

#vsualizations for above data frame
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
sns.scatterplot(data=sd_df,x='PRICEEACH',y='QUANTITYORDERED',hue='PRODUCTLINE')

import plotly.express as px
px.scatter_3d(sd_df,x='SALES',y='QUANTITYORDERED',z='PRICEEACH',color='PRODUCTLINE',size='SALES')

import plotly.express as px
barchart = px.bar(sd_df, x='YEAR_ID', y='SALES',color='YEAR_ID')
barchart.show()

plt.boxplot(sd_df['SALES'])

px.scatter(sd_df,x='SALES',y='QUANTITYORDERED',color='PRODUCTLINE',title='plotly scatter plot')

plt.scatter(data=sd_df,x='PRICEEACH',y='SALES')
plt.title('scatter plot')

sd_df.columns