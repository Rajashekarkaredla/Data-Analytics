# -*- coding: utf-8 -*-
"""tele_com.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vm4edv7Gp8ZMC98eSX796bKdGS_azJoH
"""

from google.colab import files
uploaded=files.upload()
import pandas as pd
tc_df = pd.read_csv('tele_com.csv')
tc_df

#data cleaning
tc_df = tc_df.dropna(subset=['customerID'])
tc_df

#removing extra space and making capitalize
tc_df['gender'] = tc_df['gender'].str.strip().str.capitalize()
tc_df['gender']

#mapping senior citizens 1 as yes and 0 as no
tc_df['SeniorCitizen'] = tc_df['SeniorCitizen'].apply(lambda x: 'No' if x ==0 else 'Yes')
tc_df['SeniorCitizen']

#givint integer data type to tenure and filling missing values
tc_df['tenure'] = tc_df['tenure'].fillna(0).astype(int)
tc_df['tenure']

#converting to float and replacing empty string to NaN
tc_df['TotalCharges']= tc_df['TotalCharges'].replace(' ',pd.NA).fillna(0)
tc_df['TotalCharges'] = pd.to_numeric(tc_df['TotalCharges'])
tc_df['TotalCharges']

tc_df=tc_df.dropna()
tc_df

tc_df.reset_index(drop=True, inplace=True)
tc_df

#Filter All Churned Customers
churned=tc_df[tc_df['Churn']=='Yes']
churned

# High Value Loyal Customers
tc_df[(tc_df['MonthlyCharges']>80) & (tc_df['Churn']=='No')]

#female with senior citizen and no dependents,no churn
tc_df[(tc_df['gender']=='Female') & (tc_df['SeniorCitizen']=='Yes') & (tc_df['Dependents']=='No') & (tc_df['Churn']=='No')]

#customer id and total charges of no internet services
tc_df[tc_df['InternetService']=='No'][['customerID','TotalCharges']]

#optical fiber with no tech support and no online security
tc_df[(tc_df['InternetService']=='Fiber optic') & (tc_df['TechSupport']=='No') & (tc_df['OnlineSecurity']=='No')]['customerID']

#tenure less than 6 months and Churned
tc_df[(tc_df['tenure']<6) & (tc_df['Churn']=='Yes')]

tc_df.groupby('SeniorCitizen')['Churn'].apply(lambda x : (x=='Yes').sum()).reset_index()

tc_df.groupby('SeniorCitizen')['Churn'].apply(lambda x: (x=='Yes').sum()/len(tc_df)*100).round(2).reset_index()

#percentage of churn based on gender
(tc_df.groupby('gender')['Churn'].value_counts()/len(tc_df)*100).round(2).reset_index()

#average total charges of churn
tc_df.groupby('Churn')['TotalCharges'].mean().reset_index()

tc_df.groupby(['Contract', 'PaymentMethod', 'Churn']).size().sort_values(ascending=False).reset_index().head(5)

#average tenure of each internet service
tc_df.groupby('InternetService')['tenure'].mean().round(0).reset_index()

tc_df[tc_df['tenure']>40][['customerID','MonthlyCharges']].sort_values(by='MonthlyCharges',ascending=False).head(10)['customerID'].reset_index(drop=True)

#top 10 customer id based on total charges where churned
tc_df[tc_df['Churn']=='Yes'].sort_values(by='TotalCharges',ascending=False).head(10)['customerID']

#Churned counts based on different combinations of Contract type and Internet Service
tc_df.groupby(['Contract','InternetService'])['Churn'].apply(lambda x : sum(x=='Yes')).reset_index()

#Total Services Used by each customer
services = ['PhoneService', 'MultipleLines', 'OnlineSecurity', 'OnlineBackup',
            'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies']
tc_df['TotalServixesUsed']=tc_df[services].apply(lambda x: sum(x=='Yes'),axis=1)
tc_df[['customerID','TotalServicesUsed']]

tc_df['gender'].replace({'Female':'women','Male':'men'})
#tc_df

#pivot tables
tc_df['churnbinary']= tc_df['Churn'].apply(lambda x: 1 if x=='Yes' else 0)
tc_df.pivot_table(index='Contract',columns='PaymentMethod',values='churnbinary',aggfunc='sum')

tc_df.pivot_table(index='gender',columns='Contract',values='TotalServicesUsed',aggfunc='sum')

#outlier
q1=tc_df['MonthlyCharges'].quantile(0.25)
q3=tc_df['MonthlyCharges'].quantile(0.74)
iqr=q3-q1
lower_bound=[i for i in tc_df['MonthlyCharges']if i <q1-1.5*iqr]
upper_bound=[i for i in tc_df['MonthlyCharges']if i >q3+1.5*iqr]
lower_bound,upper_bound

import matplotlib.pyplot as plt
import seaborn as sns
plt.boxplot(tc_df['MonthlyCharges'])

#correlation
import numpy as np
np.corrcoef(tc_df['TotalCharges'],tc_df['tenure'])
tc_df[['TotalCharges','tenure','MonthlyCharges']].corr()

#visualization
sns.countplot(data=tc_df,x='Churn',hue='Contract')

plt.hist(data=tc_df,x='MonthlyCharges',bins=20)
plt.xlabel('Monthly Charges')
plt.ylabel('ferequency')

import pandas as pd
corr = tc_df[['tenure', 'MonthlyCharges', 'TotalCharges']].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")

import plotly.express as px
sns.scatterplot(data=tc_df,x='tenure',y='TotalCharges',hue='Churn')

px.scatter_3d(tc_df,x='tenure',y='MonthlyCharges',z='TotalCharges',size='TotalCharges',color='Churn')

px.scatter(tc_df,x='tenure',y='MonthlyCharges',color='Churn')

import seaborn as sns
sns.barplot(data=tc_df,x='Contract',y='MonthlyCharges')

sns.scatterplot(tc_df,x='tenure',y='MonthlyCharges',hue='Churn')