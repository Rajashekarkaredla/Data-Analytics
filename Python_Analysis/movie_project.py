# -*- coding: utf-8 -*-
"""Movie_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Xjhmg8mObPgRrw7D15f2ey68cc3NIAA
"""

from google.colab import files
uploaded = files.upload()
import pandas as pd
mv_df=pd.read_csv('movie_df.csv')
mv_df

mv_df.columns

mv_df.shape

mv_df.dtypes

mv_df.isnull().sum()
(mv_df.isnull().sum()/len(mv_df)*100).round(2)

mv_df.dropna(thresh =int((100-5/100)*mv_df.shape[1]),axis=0)

mv_df.isnull().sum(axis=1)
(mv_df.isnull().sum(axis=1)/mv_df.shape[1]*100).round(2)

mv_df.drop(columns=['color','director_facebook_likes'])

#dropping rows with null values more than 5 percent
mv_df.dropna(thresh=int((100-5)/100 * mv_df.shape[1]),axis=0)

#droppping columns with null values more than 5 percent
mv_df.dropna(thresh=int(100-5)/100 * len(mv_df), axis=1)

mv_df['language'].fillna('English')

#convereting dollors ot million dollars
mv_df[['budget','gross']].div(1e6)

#creating profit column and sorted according to the profit
mv_df['profit'] = mv_df['gross'] - mv_df['budget']
mv_df.sort_values(by='profit', ascending=False,inplace=True)
mv_df['profit']

mv_df_top.drop_duplicates()

#creating IDBM rating
idbm_fil=mv_df[mv_df['num_voted_users']>25000]
idbm_sort=idbm_fil.sort_values(by=['imdb_score'], ascending=False)
idbm_250=idbm_sort.head(250).copy()
idbm_250['rank']=range(1,251)
idbm_250
top_lang_forign_film=idbm_250[idbm_250['language']!='English']
top_lang_forign_film

#finding best director avg_score
avg_score=mv_df.groupby('director_name')['imdb_score'].mean().sort_values(ascending=False).head(10).reset_index()
top_10= avg_score.sort_values(by=['director_name','imdb_score'],ascending=[True,False])
top_10

mv_df[['genre_1', 'genre_2']] = mv_df['genres'].str.split('|', expand=True).iloc[:, :2].fillna(method='ffill', axis=1)
grouped_genres = mv_df.groupby(['genre_1', 'genre_2'])
PopGenre = mv_df.groupby(['genre_1', 'genre_2'])['gross'].mean().reset_index()
PopGenre = PopGenre.sort_values(by='gross', ascending=False).head(5)
PopGenre

#outliers
def out(out):
  q1=out.quantile(0.25)
  q3=out.quantile(0.75)
  lower=[i for i in out if i<q1-1.5*(q3-q1)]
  upper=[i for i in out if i> q3+1.5*(q3-q1)]
  return lower,upper
out(mv_df['duration'])

import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(mv_df['duration'])
plt.show()
#plt.boxplot(mv_df['duration'])
#plt.show()